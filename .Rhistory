"accommodates",
"bathrooms",
"bedrooms",
"minimum_nights",
"availability_365",
"number_of_reviews",
"review_scores_rating",
"review_scores_accuracy",
"review_scores_value",
"wifi",
"parking",
"dryer",
"washer",
"kitchen",
"room_type",
"property_agg",
"superhost_t")
x_var <- data.matrix(model_data[, c("room_type",
"accommodates",
"bathrooms",
"bedrooms",
"minimum_nights",
"availability_365",
"number_of_reviews",
"review_scores_rating",
"review_scores_accuracy",
"review_scores_value",
"wifi",
"parking",
"dryer",
"washer",
"kitchen",
"room_type",
"property_agg",
"superhost_t"])
x_var <- data.matrix(model_data[, c("room_type",
"accommodates",
"bathrooms",
"bedrooms",
"minimum_nights",
"availability_365",
"number_of_reviews",
"review_scores_rating",
"review_scores_accuracy",
"review_scores_value",
"wifi",
"parking",
"dryer",
"washer",
"kitchen",
"room_type",
"property_agg",
"superhost_t")])
x_var <- data.matrix(model_data[, c("room_type",
"accommodates",
"bathrooms",
"bedrooms",
"minimum_nights",
"availability_365",
"number_of_reviews",
"review_scores_rating",
"review_scores_accuracy",
"review_scores_value",
"wifi",
"parking",
"dryer",
"washer",
"kitchen",
"room_type",
"property_agg",
"superhost_t")])
y_var <- model_data[, c("log_price")]
x_var <- data.matrix(model_data[, c("room_type",
"accommodates",
"bathrooms",
"bedrooms",
"minimum_nights",
"availability_365",
"number_of_reviews",
"review_scores_rating",
"review_scores_accuracy",
"review_scores_value",
"wifi",
"parking",
"dryer",
"washer",
"kitchen",
"room_type",
"property_agg",
"superhost_t")])
y_var <- model_data[, c("log_price")]
lambda_seq <- 10^seq(2, -2, by = -.1)
fit <- glmnet(x_var, y_var, alpha = 0, lambda  = lambda_seq)
library(tidyverse)
library(skimr)
library(jsonlite)
library(scales)
library(tidymodels)
library(lubridate)
library(Hmisc)
library(MASS)
library(StepReg)
library(mgcv)
library(VGAM)
library(caret)
library(glmnet)
install.packages('glmnet')
library(tidyverse)
library(skimr)
library(jsonlite)
library(scales)
library(tidymodels)
library(lubridate)
library(Hmisc)
library(MASS)
library(StepReg)
library(mgcv)
library(VGAM)
library(caret)
library(glmnet)
library(glmnet)
library(tidyverse)
library(skimr)
library(jsonlite)
library(scales)
library(tidymodels)
library(lubridate)
library(Hmisc)
library(MASS)
library(StepReg)
library(mgcv)
library(VGAM)
library(caret)
library(glmnet)
x_var <- data.matrix(model_data[, c("room_type",
"accommodates",
"bathrooms",
"bedrooms",
"minimum_nights",
"availability_365",
"number_of_reviews",
"review_scores_rating",
"review_scores_accuracy",
"review_scores_value",
"wifi",
"parking",
"dryer",
"washer",
"kitchen",
"room_type",
"property_agg",
"superhost_t")])
y_var <- model_data[, c("log_price")]
lambda_seq <- 10^seq(2, -2, by = -.1)
fit <- glmnet(x_var, y_var, alpha = 0, lambda  = lambda_seq)
summary(fit)
x_var <- data.matrix(model_data[, c("room_type",
"accommodates",
"bathrooms",
"bedrooms",
"minimum_nights",
"availability_365",
"number_of_reviews",
"review_scores_rating",
"review_scores_accuracy",
"review_scores_value",
"wifi",
"parking",
"dryer",
"washer",
"kitchen",
"room_type",
"property_agg",
"superhost_t")])
y_var <- model_data[, c("log_price")]
lambda_seq <- 10^seq(2, -2, by = -.1)
fit <- glmnet(x_var, y_var, alpha = 0, lambda  = lambda_seq)
ridge_cv <- cv.glmnet(x_var, y_var, alpha = 0, lambda = lambdas)
x_var <- data.matrix(model_data[, c("room_type",
"accommodates",
"bathrooms",
"bedrooms",
"minimum_nights",
"availability_365",
"number_of_reviews",
"review_scores_rating",
"review_scores_accuracy",
"review_scores_value",
"wifi",
"parking",
"dryer",
"washer",
"kitchen",
"room_type",
"property_agg",
"superhost_t")])
y_var <- model_data[, c("log_price")]
lambda_seq <- 10^seq(2, -2, by = -.1)
fit <- glmnet(x_var, y_var, alpha = 0, lambda  = lambda_seq)
ridge_cv <- cv.glmnet(x_var, y_var, alpha = 0)
best_lambda <- cv_model$lambda.min
x_var <- data.matrix(model_data[, c("room_type",
"accommodates",
"bathrooms",
"bedrooms",
"minimum_nights",
"availability_365",
"number_of_reviews",
"review_scores_rating",
"review_scores_accuracy",
"review_scores_value",
"wifi",
"parking",
"dryer",
"washer",
"kitchen",
"room_type",
"property_agg",
"superhost_t")])
y_var <- model_data[, c("log_price")]
lambda_seq <- 10^seq(2, -2, by = -.1)
cv_model <- glmnet(x_var, y_var, alpha = 0, lambda  = lambda_seq)
ridge_cv <- cv.glmnet(x_var, y_var, alpha = 0)
best_lambda <- cv_model$lambda.min
best_lambda
x_var <- data.matrix(model_data[, c("room_type",
"accommodates",
"bathrooms",
"bedrooms",
"minimum_nights",
"availability_365",
"number_of_reviews",
"review_scores_rating",
"review_scores_accuracy",
"review_scores_value",
"wifi",
"parking",
"dryer",
"washer",
"kitchen",
"room_type",
"property_agg",
"superhost_t")])
y_var <- model_data[, c("log_price")]
lambda_seq <- 10^seq(2, -2, by = -.1)
cv_model <- glmnet(x_var, y_var, alpha = 0)
ridge_cv <- cv.glmnet(x_var, y_var, alpha = 0)
best_lambda <- cv_model$lambda.min
best_lambda
best_lambda
ridge_cv
plot(cv_model)
y_var
x_var <- data.matrix(model_data[, c("room_type",
"accommodates",
"bathrooms",
"bedrooms",
"minimum_nights",
"availability_365",
"number_of_reviews",
"review_scores_rating",
"review_scores_accuracy",
"review_scores_value",
"wifi",
"parking",
"dryer",
"washer",
"kitchen",
"room_type",
"property_agg",
"superhost_t")])
y_var <- model_data[, c("log_price")]
cv_model <- glmnet(x_var, y_var, alpha = 0)
summary(cv_model)
x_var <- data.matrix(model_data[, c("room_type",
"accommodates",
"bathrooms",
"bedrooms",
"minimum_nights",
"availability_365",
"number_of_reviews",
"review_scores_rating",
"review_scores_accuracy",
"review_scores_value",
"wifi",
"parking",
"dryer",
"washer",
"kitchen",
"room_type",
"property_agg",
"superhost_t")])
y_var <- model_data[, c("log_price")]
cv_model <- glmnet(x_var, y_var, alpha = 0)
summary(cv_model)
best_lambda <- cv_model$lambda.min
best_lambda
x_var <- data.matrix(model_data[, c("room_type",
"accommodates",
"bathrooms",
"bedrooms",
"minimum_nights",
"availability_365",
"number_of_reviews",
"review_scores_rating",
"review_scores_accuracy",
"review_scores_value",
"wifi",
"parking",
"dryer",
"washer",
"kitchen",
"room_type",
"property_agg",
"superhost_t")])
y_var <- model_data[, c("log_price")]
cv_model <- glmnet(x_var, y_var, alpha = 0)
summary(cv_model)
best_lambda <- cv_model$lambda.min
best_lambda
plot(best_lambda)
x <- model.matrix(log_price ~ room_type + accommodates + bathrooms + bedrooms + minimum_nights + availability_365 + number_of_reviews + review_scores_rating + review_scores_accuracy + review_scores_value + wifi + parking + dryer + washer + kitchen + room_type + property_agg + superhost_t + bedrooms:property_agg, data = model_data)[, -1]
y <- model_data$log_price
ridge_model <- glmnet(x, y, alpha = 0)
# Perform cross-validation to find the best lambda
cv_ridge <- cv.glmnet(x, y, alpha = 0)
best_lambda <- cv_ridge$lambda.min
# Fit the ridge regression model with the best lambda
ridge_model_best <- glmnet(x, y, alpha = 0, lambda = best_lambda)
# Predict the values using the ridge regression model
predictions <- predict(ridge_model_best, s = best_lambda, newx = x)
# Calculate the R-squared value
sst <- sum((y - mean(y))^2)
sse <- sum((predictions - y)^2)
r_squared <- 1 - sse/sst
print(paste("R-squared for the ridge regression model:", r_squared))
# Print the coefficients for the ridge regression model
ridge_coefficients <- coef(ridge_model_best)
print(ridge_coefficients)
plot(cv_ridge)
best_lambda
plot(ridge_model_best, xvar = "lambda")
legend("bottomright", lwd = 1, col = 1:6, legend = colnames(X), cex = .7)
plot(ridge_model_best, xvar = "lambda")
legend("bottomright", lwd = 1, col = 1:6, legend = colnames(x), cex = .7)
plot(ridge_model_best, xvar = "lambda")
legend("bottomright", lwd = 1, col = 1:6, cex = .7)
plot(ridge_model_best)
plot(cv_ridge)
plot(ridge_model_best)
# Fit the lasso regression model with the best lambda
lasso_model_best <- glmnet(x, y, alpha = 1, lambda = best_lambda_lasso)
# Plot the ridge regression model
plot(cv_ridge)
title("Ridge Regression Model Cross-Validation Plot")
# Plot the coefficients of the ridge regression model
plot(ridge_model_best, xvar = "lambda", label = TRUE)
title("Ridge Regression Coefficients Plot")
# Create a lasso regression model using the same data
lasso_model <- glmnet(x, y, alpha = 1)
# Perform cross-validation to find the best lambda
cv_lasso <- cv.glmnet(x, y, alpha = 1)
best_lambda_lasso <- cv_lasso$lambda.min
# Fit the lasso regression model with the best lambda
lasso_model_best <- glmnet(x, y, alpha = 1, lambda = best_lambda_lasso)
# Predict the values using the lasso regression model
lasso_predictions <- predict(lasso_model_best, s = best_lambda_lasso, newx = x)
# Calculate the R-squared value
sst_lasso <- sum((y - mean(y))^2)
sse_lasso <- sum((lasso_predictions - y)^2)
r_squared_lasso <- 1 - sse_lasso/sst_lasso
print(paste("R-squared for the lasso regression model:", r_squared_lasso))
# Print the coefficients for the lasso regression model
lasso_coefficients <- coef(lasso_model_best)
print(lasso_coefficients)
# Plot the lasso regression model
plot(cv_lasso)
title("Lasso Regression Model Cross-Validation Plot")
# Plot the coefficients of the lasso regression model
plot(lasso_model_best, xvar = "lambda", label = TRUE)
title("Lasso Regression Coefficients Plot")
# Plot the ridge regression model
plot(cv_ridge)
title("Ridge Regression Model Cross-Validation Plot")
# Plot the coefficients of the ridge regression model
plot(ridge_model_best, xvar = "lambda", label = TRUE)
title("Ridge Regression Coefficients Plot")
# Create a lasso regression model using the same data
lasso_model <- glmnet(x, y, alpha = 1)
# Perform cross-validation to find the best lambda
cv_lasso <- cv.glmnet(x, y, alpha = 1)
best_lambda_lasso <- cv_lasso$lambda.min
# Fit the lasso regression model with the best lambda
lasso_model_best <- glmnet(x, y, alpha = 1, lambda = best_lambda_lasso)
# Predict the values using the lasso regression model
lasso_predictions <- predict(lasso_model_best, s = best_lambda_lasso, newx = x)
# Calculate the R-squared value
sst_lasso <- sum((y - mean(y))^2)
sse_lasso <- sum((lasso_predictions - y)^2)
r_squared_lasso <- 1 - sse_lasso/sst_lasso
print(paste("R-squared for the lasso regression model:", r_squared_lasso))
# Print the coefficients for the lasso regression model
lasso_coefficients <- coef(lasso_model_best)
print(lasso_coefficients)
# Plot the lasso regression model
plot(cv_lasso)
title("Lasso Regression Model Cross-Validation Plot")
best_lambda_lasso
log(best_lambda_lasso)
r_squared_lasso
model_data <- read.csv('data/model_data.csv')
lm.model <- lm(log_price ~ room_type + accommodates + bathrooms + bedrooms + minimum_nights + availability_365 + number_of_reviews + review_scores_rating + review_scores_accuracy + review_scores_value + wifi + parking + dryer + washer + kitchen + room_type + property_agg + superhost_t + bedrooms:property_agg, data = model_data)
summary(lm.model)
var_imp <- varImp(backward_model, scale=FALSE)
var_imp <- varImp(backward_model, scale=FALSE)
var_imp <- varImp(backward_model, scale=FALSE)
var_imp
var_imp <- varImp(backward_model, scale=FALSE)
typeof(var_imp)
var_imp <- varImp(backward_model, scale=FALSE)
write.csv(vap_imp, file = 'data/vap_imp.csv', row.names = FALSE)
var_imp <- varImp(backward_model, scale=FALSE)
write.csv(var_imp, file = 'data/vap_imp.csv', row.names = FALSE)
var_imp <- varImp(backward_model, scale=FALSE)
write.csv(var_imp, file = 'data/var_imp.csv', row.names = FALSE)
View(var_imp)
x <- model.matrix(log_price ~ room_type + accommodates + bathrooms + bedrooms + minimum_nights + availability_365 + number_of_reviews + review_scores_rating + review_scores_accuracy + review_scores_value + wifi + parking + dryer + washer + kitchen + room_type + property_agg + superhost_t + bedrooms:property_agg, data = model_data)[, -1]
y <- model_data$log_price
ridge_model <- glmnet(x, y, alpha = 0)
# Perform cross-validation to find the best lambda
cv_ridge <- cv.glmnet(x, y, alpha = 0)
best_lambda <- cv_ridge$lambda.min
# Fit the ridge regression model with the best lambda
ridge_model_best <- glmnet(x, y, alpha = 0, lambda = best_lambda)
# Predict the values using the ridge regression model
predictions <- predict(ridge_model_best, s = best_lambda, newx = x)
# Calculate the R-squared value
sst <- sum((y - mean(y))^2)
sse <- sum((predictions - y)^2)
r_squared <- 1 - sse/sst
print(paste("R-squared for the ridge regression model:", r_squared))
# Print the coefficients for the ridge regression model
ridge_coefficients <- coef(ridge_model_best)
print(ridge_coefficients)
best_lambda
r_squared
# Plot the ridge regression model
plot(cv_ridge)
title("Ridge Regression Model Cross-Validation Plot")
# Plot the coefficients of the ridge regression model
plot(ridge_model_best, xvar = "lambda", label = TRUE)
title("Ridge Regression Coefficients Plot")
# Create a lasso regression model using the same data
lasso_model <- glmnet(x, y, alpha = 1)
# Perform cross-validation to find the best lambda
cv_lasso <- cv.glmnet(x, y, alpha = 1)
best_lambda_lasso <- cv_lasso$lambda.min
# Fit the lasso regression model with the best lambda
lasso_model_best <- glmnet(x, y, alpha = 1, lambda = best_lambda_lasso)
# Predict the values using the lasso regression model
lasso_predictions <- predict(lasso_model_best, s = best_lambda_lasso, newx = x)
# Calculate the R-squared value
sst_lasso <- sum((y - mean(y))^2)
sse_lasso <- sum((lasso_predictions - y)^2)
r_squared_lasso <- 1 - sse_lasso/sst_lasso
print(paste("R-squared for the lasso regression model:", r_squared_lasso))
# Print the coefficients for the lasso regression model
lasso_coefficients <- coef(lasso_model_best)
print(lasso_coefficients)
# Plot the lasso regression model
plot(cv_lasso)
title("Lasso Regression Model Cross-Validation Plot")
x <- model.matrix(log_price ~ room_type + accommodates + bathrooms + bedrooms + minimum_nights + availability_365 + number_of_reviews + review_scores_rating + review_scores_accuracy + review_scores_value + wifi + parking + dryer + washer + kitchen + room_type + property_agg + superhost_t + bedrooms:property_agg, data = model_data)[, -1]
y <- model_data$log_price
ridge_model <- glmnet(x, y, alpha = 0)
# Perform cross-validation to find the best lambda
cv_ridge <- cv.glmnet(x, y, alpha = 0)
best_lambda <- cv_ridge$lambda.min
# Fit the ridge regression model with the best lambda
ridge_model_best <- glmnet(x, y, alpha = 0, lambda = best_lambda)
# Predict the values using the ridge regression model
predictions <- predict(ridge_model_best, s = best_lambda, newx = x)
# Calculate the R-squared value
sst <- sum((y - mean(y))^2)
sse <- sum((predictions - y)^2)
r_squared <- 1 - sse/sst
print(paste("R-squared for the ridge regression model:", r_squared))
# Print the coefficients for the ridge regression model
ridge_coefficients <- coef(ridge_model_best)
print(ridge_coefficients)
r_squared
best_lambda
best_lambda_lasso
r_squared_lasso
x <- model.matrix(log_price ~ room_type + accommodates + bathrooms + bedrooms + minimum_nights + availability_365 + number_of_reviews + review_scores_rating + review_scores_accuracy + review_scores_value + wifi + parking + dryer + washer + kitchen + room_type + property_agg + superhost_t + bedrooms:property_agg, data = model_data)[, -1]
y <- model_data$log_price
ridge_model <- glmnet(x, y, alpha = 0)
# Perform cross-validation to find the best lambda
cv_ridge <- cv.glmnet(x, y, alpha = 0)
best_lambda <- cv_ridge$lambda.min
# Fit the ridge regression model with the best lambda
ridge_model_best <- glmnet(x, y, alpha = 0, lambda = best_lambda)
# Predict the values using the ridge regression model
predictions <- predict(ridge_model_best, s = best_lambda, newx = x)
# Calculate the R-squared value
sst <- sum((y - mean(y))^2)
sse <- sum((predictions - y)^2)
r_squared <- 1 - sse/sst
print(paste("R-squared for the ridge regression model:", r_squared))
# Print the coefficients for the ridge regression model
ridge_coefficients <- coef(ridge_model_best)
print(ridge_coefficients)
